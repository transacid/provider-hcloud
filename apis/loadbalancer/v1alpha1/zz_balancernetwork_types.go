// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BalancerNetworkInitParameters struct {

	// Enable or disable the
	// Load Balancers public interface. Default: true
	EnablePublicInterface *bool `json:"enablePublicInterface,omitempty" tf:"enable_public_interface,omitempty"`

	// IP to request to be assigned to this Load
	// Balancer. If you do not provide this then you will be auto assigned an
	// IP address.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// ID of the Load Balancer.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/loadbalancer/v1alpha1.Balancer
	LoadBalancerID *float64 `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// Reference to a Balancer in loadbalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDRef *v1.Reference `json:"loadBalancerIdRef,omitempty" tf:"-"`

	// Selector for a Balancer in loadbalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDSelector *v1.Selector `json:"loadBalancerIdSelector,omitempty" tf:"-"`

	// ID of the network which should be added
	// to the Load Balancer. Required if subnet_id is not set. Successful
	// creation of the resource depends on the existence of a subnet in the
	// Hetzner Cloud Backend. Using network_id will not create an explicit
	// dependency between the Load Balancer and the subnet. Therefore
	// depends_on may need to be used. Alternatively the subnet_id
	// property can be used, which will create an explicit dependency between
	// hcloud_load_balancer_network and the existence of a subnet.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/network/v1alpha1.Network
	NetworkID *float64 `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in network to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in network to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// ID of the sub-network which should be
	// added to the Load Balancer. Required if network_id is not set.
	// Note: if the ip property is missing, the Load Balancer is
	// currently added to the last created subnet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type BalancerNetworkObservation struct {

	// Enable or disable the
	// Load Balancers public interface. Default: true
	EnablePublicInterface *bool `json:"enablePublicInterface,omitempty" tf:"enable_public_interface,omitempty"`

	// (string) ID of the Load Balancer network.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP to request to be assigned to this Load
	// Balancer. If you do not provide this then you will be auto assigned an
	// IP address.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// ID of the Load Balancer.
	LoadBalancerID *float64 `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// ID of the network which should be added
	// to the Load Balancer. Required if subnet_id is not set. Successful
	// creation of the resource depends on the existence of a subnet in the
	// Hetzner Cloud Backend. Using network_id will not create an explicit
	// dependency between the Load Balancer and the subnet. Therefore
	// depends_on may need to be used. Alternatively the subnet_id
	// property can be used, which will create an explicit dependency between
	// hcloud_load_balancer_network and the existence of a subnet.
	NetworkID *float64 `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// ID of the sub-network which should be
	// added to the Load Balancer. Required if network_id is not set.
	// Note: if the ip property is missing, the Load Balancer is
	// currently added to the last created subnet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type BalancerNetworkParameters struct {

	// Enable or disable the
	// Load Balancers public interface. Default: true
	// +kubebuilder:validation:Optional
	EnablePublicInterface *bool `json:"enablePublicInterface,omitempty" tf:"enable_public_interface,omitempty"`

	// IP to request to be assigned to this Load
	// Balancer. If you do not provide this then you will be auto assigned an
	// IP address.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// ID of the Load Balancer.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/loadbalancer/v1alpha1.Balancer
	// +kubebuilder:validation:Optional
	LoadBalancerID *float64 `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// Reference to a Balancer in loadbalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDRef *v1.Reference `json:"loadBalancerIdRef,omitempty" tf:"-"`

	// Selector for a Balancer in loadbalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDSelector *v1.Selector `json:"loadBalancerIdSelector,omitempty" tf:"-"`

	// ID of the network which should be added
	// to the Load Balancer. Required if subnet_id is not set. Successful
	// creation of the resource depends on the existence of a subnet in the
	// Hetzner Cloud Backend. Using network_id will not create an explicit
	// dependency between the Load Balancer and the subnet. Therefore
	// depends_on may need to be used. Alternatively the subnet_id
	// property can be used, which will create an explicit dependency between
	// hcloud_load_balancer_network and the existence of a subnet.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/network/v1alpha1.Network
	// +kubebuilder:validation:Optional
	NetworkID *float64 `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in network to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in network to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// ID of the sub-network which should be
	// added to the Load Balancer. Required if network_id is not set.
	// Note: if the ip property is missing, the Load Balancer is
	// currently added to the last created subnet.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

// BalancerNetworkSpec defines the desired state of BalancerNetwork
type BalancerNetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BalancerNetworkParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BalancerNetworkInitParameters `json:"initProvider,omitempty"`
}

// BalancerNetworkStatus defines the observed state of BalancerNetwork.
type BalancerNetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BalancerNetworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BalancerNetwork is the Schema for the BalancerNetworks API. Provides a Hetzner Cloud Load Balancer Network to represent a private network on a Load Balancer in the Hetzner Cloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,hc}
type BalancerNetwork struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BalancerNetworkSpec   `json:"spec"`
	Status            BalancerNetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerNetworkList contains a list of BalancerNetworks
type BalancerNetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BalancerNetwork `json:"items"`
}

// Repository type metadata.
var (
	BalancerNetwork_Kind             = "BalancerNetwork"
	BalancerNetwork_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BalancerNetwork_Kind}.String()
	BalancerNetwork_KindAPIVersion   = BalancerNetwork_Kind + "." + CRDGroupVersion.String()
	BalancerNetwork_GroupVersionKind = CRDGroupVersion.WithKind(BalancerNetwork_Kind)
)

func init() {
	SchemeBuilder.Register(&BalancerNetwork{}, &BalancerNetworkList{})
}
