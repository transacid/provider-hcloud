// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IPAssignmentInitParameters struct {

	// ID of the Floating IP.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/floatingip/v1alpha1.IP
	FloatingIPID *float64 `json:"floatingIpId,omitempty" tf:"floating_ip_id,omitempty"`

	// Reference to a IP in floatingip to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDRef *v1.Reference `json:"floatingIpIdRef,omitempty" tf:"-"`

	// Selector for a IP in floatingip to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDSelector *v1.Selector `json:"floatingIpIdSelector,omitempty" tf:"-"`

	// Server to assign the Floating IP to.
	ServerID *float64 `json:"serverId,omitempty" tf:"server_id,omitempty"`
}

type IPAssignmentObservation struct {

	// ID of the Floating IP.
	FloatingIPID *float64 `json:"floatingIpId,omitempty" tf:"floating_ip_id,omitempty"`

	// (int) Unique ID of the Floating IP Assignment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Server to assign the Floating IP to.
	ServerID *float64 `json:"serverId,omitempty" tf:"server_id,omitempty"`
}

type IPAssignmentParameters struct {

	// ID of the Floating IP.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/floatingip/v1alpha1.IP
	// +kubebuilder:validation:Optional
	FloatingIPID *float64 `json:"floatingIpId,omitempty" tf:"floating_ip_id,omitempty"`

	// Reference to a IP in floatingip to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDRef *v1.Reference `json:"floatingIpIdRef,omitempty" tf:"-"`

	// Selector for a IP in floatingip to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDSelector *v1.Selector `json:"floatingIpIdSelector,omitempty" tf:"-"`

	// Server to assign the Floating IP to.
	// +kubebuilder:validation:Optional
	ServerID *float64 `json:"serverId,omitempty" tf:"server_id,omitempty"`
}

// IPAssignmentSpec defines the desired state of IPAssignment
type IPAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPAssignmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IPAssignmentInitParameters `json:"initProvider,omitempty"`
}

// IPAssignmentStatus defines the observed state of IPAssignment.
type IPAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IPAssignment is the Schema for the IPAssignments API. Provides a Hetzner Cloud Floating IP Assignment to assign a Floating IP to a Hetzner Cloud Server.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,hc}
type IPAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serverId) || (has(self.initProvider) && has(self.initProvider.serverId))",message="spec.forProvider.serverId is a required parameter"
	Spec   IPAssignmentSpec   `json:"spec"`
	Status IPAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPAssignmentList contains a list of IPAssignments
type IPAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPAssignment `json:"items"`
}

// Repository type metadata.
var (
	IPAssignment_Kind             = "IPAssignment"
	IPAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPAssignment_Kind}.String()
	IPAssignment_KindAPIVersion   = IPAssignment_Kind + "." + CRDGroupVersion.String()
	IPAssignment_GroupVersionKind = CRDGroupVersion.WithKind(IPAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&IPAssignment{}, &IPAssignmentList{})
}
