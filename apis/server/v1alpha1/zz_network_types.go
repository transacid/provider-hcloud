// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkInitParameters_2 struct {

	// Additional IPs to be assigned
	// to this server.
	// +listType=set
	AliasIps []*string `json:"aliasIps,omitempty" tf:"alias_ips,omitempty"`

	// IP to request to be assigned to this server.
	// If you do not provide this then you will be auto assigned an IP
	// address.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// ID of the network which should be added
	// to the server. Required if subnet_id is not set. Successful creation
	// of the resource depends on the existence of a subnet in the Hetzner
	// Cloud Backend. Using network_id will not create an explicit
	// dependency between server and subnet. Therefore depends_on may need
	// to be used. Alternatively the subnet_id property can be used, which
	// will create an explicit dependency between hcloud_server_network and
	// the existence of a subnet.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/network/v1alpha1.Network
	NetworkID *float64 `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in network to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in network to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// ID of the server.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/server/v1alpha1.Server
	ServerID *float64 `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Reference to a Server in server to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDRef *v1.Reference `json:"serverIdRef,omitempty" tf:"-"`

	// Selector for a Server in server to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDSelector *v1.Selector `json:"serverIdSelector,omitempty" tf:"-"`

	// ID of the sub-network which should be
	// added to the Server. Required if network_id is not set.
	// Note: if the ip property is missing, the Server is currently added
	// to the last created subnet.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/network/v1alpha1.Subnet
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in network to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in network to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type NetworkObservation_2 struct {

	// Additional IPs to be assigned
	// to this server.
	// +listType=set
	AliasIps []*string `json:"aliasIps,omitempty" tf:"alias_ips,omitempty"`

	// (string) ID of the server network.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP to request to be assigned to this server.
	// If you do not provide this then you will be auto assigned an IP
	// address.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// ID of the network which should be added
	// to the server. Required if subnet_id is not set. Successful creation
	// of the resource depends on the existence of a subnet in the Hetzner
	// Cloud Backend. Using network_id will not create an explicit
	// dependency between server and subnet. Therefore depends_on may need
	// to be used. Alternatively the subnet_id property can be used, which
	// will create an explicit dependency between hcloud_server_network and
	// the existence of a subnet.
	NetworkID *float64 `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// ID of the server.
	ServerID *float64 `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// ID of the sub-network which should be
	// added to the Server. Required if network_id is not set.
	// Note: if the ip property is missing, the Server is currently added
	// to the last created subnet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type NetworkParameters_2 struct {

	// Additional IPs to be assigned
	// to this server.
	// +kubebuilder:validation:Optional
	// +listType=set
	AliasIps []*string `json:"aliasIps,omitempty" tf:"alias_ips,omitempty"`

	// IP to request to be assigned to this server.
	// If you do not provide this then you will be auto assigned an IP
	// address.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// ID of the network which should be added
	// to the server. Required if subnet_id is not set. Successful creation
	// of the resource depends on the existence of a subnet in the Hetzner
	// Cloud Backend. Using network_id will not create an explicit
	// dependency between server and subnet. Therefore depends_on may need
	// to be used. Alternatively the subnet_id property can be used, which
	// will create an explicit dependency between hcloud_server_network and
	// the existence of a subnet.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/network/v1alpha1.Network
	// +kubebuilder:validation:Optional
	NetworkID *float64 `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in network to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in network to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// ID of the server.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/server/v1alpha1.Server
	// +kubebuilder:validation:Optional
	ServerID *float64 `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Reference to a Server in server to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDRef *v1.Reference `json:"serverIdRef,omitempty" tf:"-"`

	// Selector for a Server in server to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDSelector *v1.Selector `json:"serverIdSelector,omitempty" tf:"-"`

	// ID of the sub-network which should be
	// added to the Server. Required if network_id is not set.
	// Note: if the ip property is missing, the Server is currently added
	// to the last created subnet.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/network/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in network to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in network to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

// NetworkSpec defines the desired state of Network
type NetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkInitParameters_2 `json:"initProvider,omitempty"`
}

// NetworkStatus defines the observed state of Network.
type NetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Network is the Schema for the Networks API. Provides a Hetzner Cloud Server Network to represent a private network on a server in the Hetzner Cloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,hc}
type Network struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkSpec   `json:"spec"`
	Status            NetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkList contains a list of Networks
type NetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Network `json:"items"`
}

// Repository type metadata.
var (
	Network_Kind             = "Network"
	Network_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Network_Kind}.String()
	Network_KindAPIVersion   = Network_Kind + "." + CRDGroupVersion.String()
	Network_GroupVersionKind = CRDGroupVersion.WithKind(Network_Kind)
)

func init() {
	SchemeBuilder.Register(&Network{}, &NetworkList{})
}
