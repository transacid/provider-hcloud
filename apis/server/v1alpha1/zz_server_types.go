// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type NetworkInitParameters struct {

	// Alias IPs the server should have in the Network.
	// +listType=set
	AliasIps []*string `json:"aliasIps,omitempty" tf:"alias_ips,omitempty"`

	// Specify the IP the server should get in the network
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// ID of the network
	NetworkID *float64 `json:"networkId,omitempty" tf:"network_id,omitempty"`
}

type NetworkObservation struct {

	// Alias IPs the server should have in the Network.
	// +listType=set
	AliasIps []*string `json:"aliasIps,omitempty" tf:"alias_ips,omitempty"`

	// Specify the IP the server should get in the network
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// The MAC address the private interface of the server has
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// ID of the network
	NetworkID *float64 `json:"networkId,omitempty" tf:"network_id,omitempty"`
}

type NetworkParameters struct {

	// Alias IPs the server should have in the Network.
	// +kubebuilder:validation:Optional
	// +listType=set
	AliasIps []*string `json:"aliasIps,omitempty" tf:"alias_ips,omitempty"`

	// Specify the IP the server should get in the network
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// ID of the network
	// +kubebuilder:validation:Optional
	NetworkID *float64 `json:"networkId" tf:"network_id,omitempty"`
}

type PublicNetInitParameters struct {
	IPv4 *float64 `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	IPv4Enabled *bool `json:"ipv4Enabled,omitempty" tf:"ipv4_enabled,omitempty"`

	IPv6 *float64 `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	IPv6Enabled *bool `json:"ipv6Enabled,omitempty" tf:"ipv6_enabled,omitempty"`
}

type PublicNetObservation struct {
	IPv4 *float64 `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	IPv4Enabled *bool `json:"ipv4Enabled,omitempty" tf:"ipv4_enabled,omitempty"`

	IPv6 *float64 `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	IPv6Enabled *bool `json:"ipv6Enabled,omitempty" tf:"ipv6_enabled,omitempty"`
}

type PublicNetParameters struct {

	// +kubebuilder:validation:Optional
	IPv4 *float64 `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// +kubebuilder:validation:Optional
	IPv4Enabled *bool `json:"ipv4Enabled,omitempty" tf:"ipv4_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IPv6 *float64 `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	// +kubebuilder:validation:Optional
	IPv6Enabled *bool `json:"ipv6Enabled,omitempty" tf:"ipv6_enabled,omitempty"`
}

type ServerInitParameters struct {

	// Enable the use of deprecated images (default: false). Note Deprecated images will be removed after three months. Using them is then no longer possible.
	AllowDeprecatedImages *bool `json:"allowDeprecatedImages,omitempty" tf:"allow_deprecated_images,omitempty"`

	// Enable or disable backups.
	Backups *bool `json:"backups,omitempty" tf:"backups,omitempty"`

	// The datacenter name to create the server in. See the Hetzner Docs for more details about datacenters.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// Enable or disable delete protection (Needs to be the same as rebuild_protection). See "Delete Protection" in the Provider Docs for details.
	DeleteProtection *bool `json:"deleteProtection,omitempty" tf:"delete_protection,omitempty"`

	// Firewall IDs the server should be attached to on creation.
	// +listType=set
	FirewallIds []*float64 `json:"firewallIds,omitempty" tf:"firewall_ids,omitempty"`

	// Ignores any updates
	// to the firewall_ids argument which were received from the server.
	// This should not be used in normal cases. See the documentation of the
	// hcloud_firewall_attachment resource for a reason to use this
	// argument.
	IgnoreRemoteFirewallIds *bool `json:"ignoreRemoteFirewallIds,omitempty" tf:"ignore_remote_firewall_ids,omitempty"`

	// Name or ID of the image the server is created from. Note the image property is only required when using the resource to create servers. Thus, users will get an error from the underlying client library if they forget to set the property and try to create a server.
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// ID or Name of an ISO image to mount.
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// If true, do not upgrade the disk. This allows downgrading the server type later.
	KeepDisk *bool `json:"keepDisk,omitempty" tf:"keep_disk,omitempty"`

	// User-defined labels (key-value pairs) should be created with.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location name to create the server in. See the Hetzner Docs for more details about locations.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network the server should be attached to on creation. (Can be specified multiple times)
	Network []NetworkInitParameters `json:"network,omitempty" tf:"network,omitempty"`

	// Placement Group ID the server added to on creation.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/placementgroup/v1alpha1.Group
	PlacementGroupID *float64 `json:"placementGroupId,omitempty" tf:"placement_group_id,omitempty"`

	// Reference to a Group in placementgroup to populate placementGroupId.
	// +kubebuilder:validation:Optional
	PlacementGroupIDRef *v1.Reference `json:"placementGroupIdRef,omitempty" tf:"-"`

	// Selector for a Group in placementgroup to populate placementGroupId.
	// +kubebuilder:validation:Optional
	PlacementGroupIDSelector *v1.Selector `json:"placementGroupIdSelector,omitempty" tf:"-"`

	// In this block you can either enable / disable ipv4 and ipv6 or link existing primary IPs (checkout the examples).
	// If this block is not defined, two primary (ipv4 & ipv6) ips getting auto generated.
	PublicNet []PublicNetInitParameters `json:"publicNet,omitempty" tf:"public_net,omitempty"`

	// Enable or disable rebuild protection (Needs to be the same as delete_protection).
	RebuildProtection *bool `json:"rebuildProtection,omitempty" tf:"rebuild_protection,omitempty"`

	// Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. linux64 or linux32
	Rescue *string `json:"rescue,omitempty" tf:"rescue,omitempty"`

	// SSH key IDs or names which should be injected into the server at creation time. Once the server is created, you can not update the list of SSH Keys. If you do change this, you will be prompted to destroy and recreate the server. You can avoid this by setting lifecycle.ignore_changes to [ ssh_keys ].
	SSHKeys []*string `json:"sshKeys,omitempty" tf:"ssh_keys,omitempty"`

	// Name of the server type this server should be created with.
	ServerType *string `json:"serverType,omitempty" tf:"server_type,omitempty"`

	// (bool) Whether to try shutting the server down gracefully before deleting it.
	ShutdownBeforeDeletion *bool `json:"shutdownBeforeDeletion,omitempty" tf:"shutdown_before_deletion,omitempty"`

	// Cloud-Init user data to use during server creation
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type ServerObservation struct {

	// Enable the use of deprecated images (default: false). Note Deprecated images will be removed after three months. Using them is then no longer possible.
	AllowDeprecatedImages *bool `json:"allowDeprecatedImages,omitempty" tf:"allow_deprecated_images,omitempty"`

	// (string) The backup window of the server, if enabled.
	BackupWindow *string `json:"backupWindow,omitempty" tf:"backup_window,omitempty"`

	// Enable or disable backups.
	Backups *bool `json:"backups,omitempty" tf:"backups,omitempty"`

	// The datacenter name to create the server in. See the Hetzner Docs for more details about datacenters.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// Enable or disable delete protection (Needs to be the same as rebuild_protection). See "Delete Protection" in the Provider Docs for details.
	DeleteProtection *bool `json:"deleteProtection,omitempty" tf:"delete_protection,omitempty"`

	// Firewall IDs the server should be attached to on creation.
	// +listType=set
	FirewallIds []*float64 `json:"firewallIds,omitempty" tf:"firewall_ids,omitempty"`

	// (int) Unique ID of the server.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (string) The IPv4 address.
	IPv4Address *string `json:"ipv4Address,omitempty" tf:"ipv4_address,omitempty"`

	// (string) The first IPv6 address of the assigned network.
	IPv6Address *string `json:"ipv6Address,omitempty" tf:"ipv6_address,omitempty"`

	// (string) The IPv6 network.
	IPv6Network *string `json:"ipv6Network,omitempty" tf:"ipv6_network,omitempty"`

	// Ignores any updates
	// to the firewall_ids argument which were received from the server.
	// This should not be used in normal cases. See the documentation of the
	// hcloud_firewall_attachment resource for a reason to use this
	// argument.
	IgnoreRemoteFirewallIds *bool `json:"ignoreRemoteFirewallIds,omitempty" tf:"ignore_remote_firewall_ids,omitempty"`

	// Name or ID of the image the server is created from. Note the image property is only required when using the resource to create servers. Thus, users will get an error from the underlying client library if they forget to set the property and try to create a server.
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// ID or Name of an ISO image to mount.
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// If true, do not upgrade the disk. This allows downgrading the server type later.
	KeepDisk *bool `json:"keepDisk,omitempty" tf:"keep_disk,omitempty"`

	// User-defined labels (key-value pairs) should be created with.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location name to create the server in. See the Hetzner Docs for more details about locations.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network the server should be attached to on creation. (Can be specified multiple times)
	Network []NetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	// Placement Group ID the server added to on creation.
	PlacementGroupID *float64 `json:"placementGroupId,omitempty" tf:"placement_group_id,omitempty"`

	// (int) The size of the primary disk in GB.
	PrimaryDiskSize *float64 `json:"primaryDiskSize,omitempty" tf:"primary_disk_size,omitempty"`

	// In this block you can either enable / disable ipv4 and ipv6 or link existing primary IPs (checkout the examples).
	// If this block is not defined, two primary (ipv4 & ipv6) ips getting auto generated.
	PublicNet []PublicNetObservation `json:"publicNet,omitempty" tf:"public_net,omitempty"`

	// Enable or disable rebuild protection (Needs to be the same as delete_protection).
	RebuildProtection *bool `json:"rebuildProtection,omitempty" tf:"rebuild_protection,omitempty"`

	// Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. linux64 or linux32
	Rescue *string `json:"rescue,omitempty" tf:"rescue,omitempty"`

	// SSH key IDs or names which should be injected into the server at creation time. Once the server is created, you can not update the list of SSH Keys. If you do change this, you will be prompted to destroy and recreate the server. You can avoid this by setting lifecycle.ignore_changes to [ ssh_keys ].
	SSHKeys []*string `json:"sshKeys,omitempty" tf:"ssh_keys,omitempty"`

	// Name of the server type this server should be created with.
	ServerType *string `json:"serverType,omitempty" tf:"server_type,omitempty"`

	// (bool) Whether to try shutting the server down gracefully before deleting it.
	ShutdownBeforeDeletion *bool `json:"shutdownBeforeDeletion,omitempty" tf:"shutdown_before_deletion,omitempty"`

	// (string) The status of the server.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Cloud-Init user data to use during server creation
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

type ServerParameters struct {

	// Enable the use of deprecated images (default: false). Note Deprecated images will be removed after three months. Using them is then no longer possible.
	// +kubebuilder:validation:Optional
	AllowDeprecatedImages *bool `json:"allowDeprecatedImages,omitempty" tf:"allow_deprecated_images,omitempty"`

	// Enable or disable backups.
	// +kubebuilder:validation:Optional
	Backups *bool `json:"backups,omitempty" tf:"backups,omitempty"`

	// The datacenter name to create the server in. See the Hetzner Docs for more details about datacenters.
	// +kubebuilder:validation:Optional
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// Enable or disable delete protection (Needs to be the same as rebuild_protection). See "Delete Protection" in the Provider Docs for details.
	// +kubebuilder:validation:Optional
	DeleteProtection *bool `json:"deleteProtection,omitempty" tf:"delete_protection,omitempty"`

	// Firewall IDs the server should be attached to on creation.
	// +kubebuilder:validation:Optional
	// +listType=set
	FirewallIds []*float64 `json:"firewallIds,omitempty" tf:"firewall_ids,omitempty"`

	// Ignores any updates
	// to the firewall_ids argument which were received from the server.
	// This should not be used in normal cases. See the documentation of the
	// hcloud_firewall_attachment resource for a reason to use this
	// argument.
	// +kubebuilder:validation:Optional
	IgnoreRemoteFirewallIds *bool `json:"ignoreRemoteFirewallIds,omitempty" tf:"ignore_remote_firewall_ids,omitempty"`

	// Name or ID of the image the server is created from. Note the image property is only required when using the resource to create servers. Thus, users will get an error from the underlying client library if they forget to set the property and try to create a server.
	// +kubebuilder:validation:Optional
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// ID or Name of an ISO image to mount.
	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// If true, do not upgrade the disk. This allows downgrading the server type later.
	// +kubebuilder:validation:Optional
	KeepDisk *bool `json:"keepDisk,omitempty" tf:"keep_disk,omitempty"`

	// User-defined labels (key-value pairs) should be created with.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location name to create the server in. See the Hetzner Docs for more details about locations.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network the server should be attached to on creation. (Can be specified multiple times)
	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// Placement Group ID the server added to on creation.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/placementgroup/v1alpha1.Group
	// +kubebuilder:validation:Optional
	PlacementGroupID *float64 `json:"placementGroupId,omitempty" tf:"placement_group_id,omitempty"`

	// Reference to a Group in placementgroup to populate placementGroupId.
	// +kubebuilder:validation:Optional
	PlacementGroupIDRef *v1.Reference `json:"placementGroupIdRef,omitempty" tf:"-"`

	// Selector for a Group in placementgroup to populate placementGroupId.
	// +kubebuilder:validation:Optional
	PlacementGroupIDSelector *v1.Selector `json:"placementGroupIdSelector,omitempty" tf:"-"`

	// In this block you can either enable / disable ipv4 and ipv6 or link existing primary IPs (checkout the examples).
	// If this block is not defined, two primary (ipv4 & ipv6) ips getting auto generated.
	// +kubebuilder:validation:Optional
	PublicNet []PublicNetParameters `json:"publicNet,omitempty" tf:"public_net,omitempty"`

	// Enable or disable rebuild protection (Needs to be the same as delete_protection).
	// +kubebuilder:validation:Optional
	RebuildProtection *bool `json:"rebuildProtection,omitempty" tf:"rebuild_protection,omitempty"`

	// Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. linux64 or linux32
	// +kubebuilder:validation:Optional
	Rescue *string `json:"rescue,omitempty" tf:"rescue,omitempty"`

	// SSH key IDs or names which should be injected into the server at creation time. Once the server is created, you can not update the list of SSH Keys. If you do change this, you will be prompted to destroy and recreate the server. You can avoid this by setting lifecycle.ignore_changes to [ ssh_keys ].
	// +kubebuilder:validation:Optional
	SSHKeys []*string `json:"sshKeys,omitempty" tf:"ssh_keys,omitempty"`

	// Name of the server type this server should be created with.
	// +kubebuilder:validation:Optional
	ServerType *string `json:"serverType,omitempty" tf:"server_type,omitempty"`

	// (bool) Whether to try shutting the server down gracefully before deleting it.
	// +kubebuilder:validation:Optional
	ShutdownBeforeDeletion *bool `json:"shutdownBeforeDeletion,omitempty" tf:"shutdown_before_deletion,omitempty"`

	// Cloud-Init user data to use during server creation
	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`
}

// ServerSpec defines the desired state of Server
type ServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServerInitParameters `json:"initProvider,omitempty"`
}

// ServerStatus defines the observed state of Server.
type ServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Server is the Schema for the Servers API. Provides an Hetzner Cloud server resource. This can be used to create, modify, and delete servers. Servers also support provisioning.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,hc}
type Server struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serverType) || (has(self.initProvider) && has(self.initProvider.serverType))",message="spec.forProvider.serverType is a required parameter"
	Spec   ServerSpec   `json:"spec"`
	Status ServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerList contains a list of Servers
type ServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Server `json:"items"`
}

// Repository type metadata.
var (
	Server_Kind             = "Server"
	Server_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Server_Kind}.String()
	Server_KindAPIVersion   = Server_Kind + "." + CRDGroupVersion.String()
	Server_GroupVersionKind = CRDGroupVersion.WithKind(Server_Kind)
)

func init() {
	SchemeBuilder.Register(&Server{}, &ServerList{})
}
