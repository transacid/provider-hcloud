// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AttachmentInitParameters struct {

	// ID of the firewall the resources
	// should be attached to.
	FirewallID *float64 `json:"firewallId,omitempty" tf:"firewall_id,omitempty"`

	// List of label selectors used to
	// select resources to attach to the firewall.
	// +listType=set
	LabelSelectors []*string `json:"labelSelectors,omitempty" tf:"label_selectors,omitempty"`

	// List of Server IDs to attach to the
	// firewall.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/server/v1alpha1.Server
	// +listType=set
	ServerIds []*float64 `json:"serverIds,omitempty" tf:"server_ids,omitempty"`

	// References to Server in server to populate serverIds.
	// +kubebuilder:validation:Optional
	ServerIdsRefs []v1.Reference `json:"serverIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Server in server to populate serverIds.
	// +kubebuilder:validation:Optional
	ServerIdsSelector *v1.Selector `json:"serverIdsSelector,omitempty" tf:"-"`
}

type AttachmentObservation struct {

	// ID of the firewall the resources
	// should be attached to.
	FirewallID *float64 `json:"firewallId,omitempty" tf:"firewall_id,omitempty"`

	// Unique ID representing this hcloud_firewall_attachment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of label selectors used to
	// select resources to attach to the firewall.
	// +listType=set
	LabelSelectors []*string `json:"labelSelectors,omitempty" tf:"label_selectors,omitempty"`

	// List of Server IDs to attach to the
	// firewall.
	// +listType=set
	ServerIds []*float64 `json:"serverIds,omitempty" tf:"server_ids,omitempty"`
}

type AttachmentParameters struct {

	// ID of the firewall the resources
	// should be attached to.
	// +kubebuilder:validation:Optional
	FirewallID *float64 `json:"firewallId,omitempty" tf:"firewall_id,omitempty"`

	// List of label selectors used to
	// select resources to attach to the firewall.
	// +kubebuilder:validation:Optional
	// +listType=set
	LabelSelectors []*string `json:"labelSelectors,omitempty" tf:"label_selectors,omitempty"`

	// List of Server IDs to attach to the
	// firewall.
	// +crossplane:generate:reference:type=github.com/transacid/provider-hcloud/apis/server/v1alpha1.Server
	// +kubebuilder:validation:Optional
	// +listType=set
	ServerIds []*float64 `json:"serverIds,omitempty" tf:"server_ids,omitempty"`

	// References to Server in server to populate serverIds.
	// +kubebuilder:validation:Optional
	ServerIdsRefs []v1.Reference `json:"serverIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Server in server to populate serverIds.
	// +kubebuilder:validation:Optional
	ServerIdsSelector *v1.Selector `json:"serverIdsSelector,omitempty" tf:"-"`
}

// AttachmentSpec defines the desired state of Attachment
type AttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AttachmentInitParameters `json:"initProvider,omitempty"`
}

// AttachmentStatus defines the observed state of Attachment.
type AttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Attachment is the Schema for the Attachments API. Attaches resources to a Hetzner Cloud Firewall.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,hc}
type Attachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.firewallId) || (has(self.initProvider) && has(self.initProvider.firewallId))",message="spec.forProvider.firewallId is a required parameter"
	Spec   AttachmentSpec   `json:"spec"`
	Status AttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AttachmentList contains a list of Attachments
type AttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Attachment `json:"items"`
}

// Repository type metadata.
var (
	Attachment_Kind             = "Attachment"
	Attachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Attachment_Kind}.String()
	Attachment_KindAPIVersion   = Attachment_Kind + "." + CRDGroupVersion.String()
	Attachment_GroupVersionKind = CRDGroupVersion.WithKind(Attachment_Kind)
)

func init() {
	SchemeBuilder.Register(&Attachment{}, &AttachmentList{})
}
